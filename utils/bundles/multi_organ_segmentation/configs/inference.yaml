---
_mode_: debug

imports:
- "$import os"
- "$import torch"
- "$import monai"
- "$import glob"

input_channels: 1
output_classes: 8
bundle_root: "bundles/multi_organ_segmentation"

arch_ckpt_path: "$@bundle_root + '/models/search_code_18590.pt'"
model_path: "$@bundle_root + '/models/model.ts'"
arch_ckpt: "$torch.load(@arch_ckpt_path, map_location='cpu', weights_only=True)"
output_dir: "debug/ncct_cect/vindr_ds/segmentation_masks"
dataset_dir: "debug/ncct_cect/vindr_ds/resampled_volumes"  # Fixed path to resampled volumes
data_list_file_path: "$@bundle_root + '/configs/dataset_0.json'"
datalist: "$monai.data.load_decathlon_datalist(@data_list_file_path, data_list_key='testing', base_dir=@dataset_dir)"
device: "$torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
# device: "$torch.device('cpu')"  # Force CPU usage
dints_space:
  _target_: monai.networks.nets.TopologyInstance
  channel_mul: 1
  num_blocks: 12
  num_depths: 4
  use_downsample: true
  arch_code:
  - "$@arch_ckpt['arch_code_a']"
  - "$@arch_ckpt['arch_code_c']"
  device: "@device"
network_def:
  _target_: monai.networks.nets.DiNTS
  dints_space: "@dints_space"
  in_channels: "@input_channels"
  num_classes: "@output_classes"
  use_downsample: true
  node_a: "$torch.from_numpy(@arch_ckpt['node_a'])"
network: "$@network_def.to(@device)"

preprocessing:
  _target_: Compose
  transforms:
  - _target_: LoadImaged
    keys: image
  - _target_: EnsureChannelFirstd
    keys: image
  - _target_: Orientationd
    keys: image
    axcodes: RAS
  - _target_: Spacingd
    keys: image
    pixdim: [1.0, 1.0, 1.0]
    mode: nearest
  - _target_: ScaleIntensityRanged
    keys: image
    a_min: -500
    a_max: 500
    b_min: 0
    b_max: 1
    clip: true
  - _target_: EnsureTyped
    keys: image

dataset:
  _target_: Dataset
  data: "@datalist"
  transform: "@preprocessing"

dataloader:
  _target_: DataLoader
  dataset: "@dataset"
  batch_size: 1
  shuffle: false
  num_workers: 4  # Increased for CPU processing

inferer:
  _target_: SlidingWindowInferer
  roi_size: [96, 96, 96]  # Increased ROI size for better segmentation
  sw_batch_size: 1
  overlap: 0.625  # Increased overlap for better results
postprocessing:
  _target_: Compose
  transforms:
  - _target_: Activationsd
    keys: pred
    softmax: true
  - _target_: Invertd
    keys: pred
    transform: "@preprocessing"
    orig_keys: image
    meta_key_postfix: meta_dict
    nearest_interp: true
    to_tensor: false
  - _target_: AsDiscreted
    keys: pred
    argmax: true
  - _target_: SaveImaged
    keys: pred
    meta_keys: pred_meta_dict
    output_dir: "debug/ncct_cect/vindr_ds/segmentation_masks"
    print_log: true
    output_postfix: pred
    output_ext: ".nii.gz"
    resample: false
handlers:
- _target_: StatsHandler
  iteration_log: false

evaluator:
  _target_: SupervisedEvaluator
  device: "@device"
  val_data_loader: "@dataloader"
  network: "@network"
  inferer: "@inferer"
  postprocessing: "@postprocessing"
  val_handlers: "@handlers"
  amp: false  # Disabled AMP for stability

initialize:
- "$setattr(torch.backends.cudnn, 'benchmark', True)"

run:
- "$@evaluator.run()"

# initialize:
# - "$setattr(torch.backends.cudnn, 'benchmark', True)"
# run:
#   - "$@evaluator.run()"
#   - _target_: monai.bundle.workflows.SupervisedEvaluator
#     device: "@device"
#     val_data_loader: "@dataloader"
#     network: "@network"
#     inferer: "@inferer"
#     postprocessing: "@postprocessing"
#     val_handlers: "@handlers"
#     amp: false  # Disabled AMP for stability
